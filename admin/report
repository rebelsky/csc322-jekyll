#!/usr/bin/perl

# A quick hack for grading a student using current criteria.

# +----------+--------------------------------------------------------
# | Settings |
# +----------+

# Do we want detailed output?  (Usually, the answer is yes.  I should
# also take this from the command line.)
my $DETAILED = 1;

# Is this a real or estimated grade report
my $ESTIMATED = 1;

# +--------+----------------------------------------------------------
# | "Main" |
# +--------+

my $email = $ARGV[1];
my $fullname = $ARGV[0];

if ($ESTIMATED) {
  print <<"ESTIMATED";
Estimated Grade Report for $fullname [$email]

This is an experimental grade report and is not guaranteed to be accurate.
Estimated grades are based on current status in the course.  Final grades
may therefore be much different.

ESTIMATED
}
else {
print <<"FINAL";
Final Grade Report for $fullname [$email]

This report includes all of the graded work that I know about in the
class.  Barring exceptional circumstances, I will report the letter
grade given at the end of the summary.

FINAL
}

# Percentages are now concealed in the calls to printSummary

# Grade Categories
my $participation = 0;
my $homework = 0;
my $paper = 0;
my $reports = 0;
my $reports = 0;
my $presentation = 0;
my $portfolio = 0;

# Other info
my $partinfo = "";
my $notes = "";
my $absences = "";
my $extra = 0;
my @extra;

# Process all of the lines
open(GRADES, "grep '^$email' grades | ");
while ($line = <GRADES>) {
  chomp($line);
  # @parts = split /\W+/, $line, 4;     # Problems with ( for some reason
  @parts = split /[ \t]+/, $line, 4;
  if (! ($parts[0] eq $email)) {
    my $wrong = $parts[0];
    print STDERR "[Error processing grades.  Found $wrong instead of $email.  Results likely to be bad.]\n\n";
    break;
  }
  $category = $parts[1];
  $grade = $parts[2];
  $info = $parts[3];
  # print stderr "CATEGORY: [$category], GRADE: $grade, INFO: $info\n";

  if ($category =~ m/^notes/) {
    $notes = "$notes$info\n";
  } # notes
  elsif ($category =~ m/^absent/) {
    $absent += $grade;
    $absences .= "\t$line\n";
  } # absent

  elsif ($category =~ m/^participation/) {
    $participation = $grade;
  } # participation
  elsif ($category =~ m/^homework/) {
    $homework = $grade;
  } # homework
  elsif (($category =~ m/^essay/) || ($category =~ m/^paper/)) {
    if (!ignore($grade)) {
      $paper = $grade;
    }
  } # essay 
  elsif ($category =~ m/^reports/) {
    $reports = $grade;
  } # reports
  elsif ($category =~ m/project/) {
    $project = $grade;
  } # project
  elsif ($category =~ m/presentation/) {
    $presentation = $grade;
  }

  elsif ($category =~ m/^ec/) {
    push @extra, "$grade\t$info";
    $extra += $grade;
  } # extra credit

  elsif (($category =~ m/^numgrade/) || ($category =~ m/^numeric/)){
    $numeric_grade = $grade;
  } # numeric grade
  elsif (($category =~ m/^letgrade/) || ($category =~ m/^letter/)) {
    $letter_grade = $grade;
  } # letter grade

  else {
    print STDERR "Invalid category: $category\n";
    print "[Error processing grade ($category/$grade).  Results likely to be bad.]\n\n";
  } # unknown
} # while
close(GRADES);

if ($notes) {
   print "ADDITIONAL NOTES\n";
   print "----------------\n";
   print "\n";
   print "$notes\n";
}

print "SUMMARY REPORT\n";
print "--------------\n";
print "\n";
# printSummary(participation,homework,paper,reports,presentation,project,portfolio)
printSummary("10.0", "10.0", "20.0", "10.0", "10.0", "20.0", "20.0");

# +-------------+-----------------------------------------------------
# | Subroutines |
# +-------------+

sub convertCategoryGrade($) {
  my $grade = shift;
  if ($grade eq "check") {
    return 3;
  }
  elsif ($grade eq "check+") {
    return 5;
  }
  elsif ($grade eq "check++") {
    return 5.5;
  }
  elsif ($grade eq "check-") {
    return 2;
  }
  elsif ($grade eq "plus") {
    return 6;
  } 
  elsif ($grade eq "minus") {
    return 1;
  }
  elsif (($grade eq "zero") || ($grade eq "0")) {
    return 0;
  }
  elsif ($grade eq "good") {
    return 3;
  }
  elsif ($grade eq "vg") {
    return 4.5;
  }
  elsif (($grade eq "excellent") || ($grade eq "ex")) {
    return 5.5;
  }
  elsif ($grade eq "fair") {
    return 2;
  }
  elsif ($grade eq "poor") {
    return 1;
  }
  else {
    return -1;
  }
} # convertCategoryGrade

sub convertLetterGrade($) {
  # A quick mapping of letter grades to letters
  %letters = ("A+", 100, "A", 96, "A-", 92, "A-/B+", 90, "A/B", 90,
              "B+", 88, "B", 86, "B-", 82, "B-/C+", 80, "B/C", 80,
              "C+", 78, "C", 76, "C-", 72, "C-/D+", 70, "C/D", 70,
              "D+", 68, "D", 66, "D-", 62,
              "F", 55,
              "0", 0, "Zero", 0, "zero", 0);

  my $grade = shift;
  if (($grade eq "0") || ($grade eq "zero") || ($grade eq "Zero")) {
    return 0;
  }
  my $num = $letters{$grade};
  if ($num) {
    return $num;
  }
  elsif ($grade =~ /[0-9][0-9]*/) {
    return $grade;
  }
  else {
    return -1;
  }
} # convertLetterGrade

sub max($$) {
  my $x = shift;
  my $y = shift;
  if ($x > $y) {
    return $x;
  }
  else {
    return $y;
  }
} # max

sub min($$) {
  my $x = shift;
  my $y = shift;
  if ($x < $y) {
    return $x;
  }
  else {
    return $y;
  }
} # min

sub round0($) {
  my $val = shift;
  return sprintf ("%.0f", $val);
} # round1

sub round1($) {
  my $val = shift;
  return sprintf ("%.1f", $val);
} # round1

sub round2($) {
  my $val = shift;
  return sprintf ("%.2f", $val);
} # round2

sub ignore($) {
  my $val = shift;
  return (($val eq "x") || ($val eq "_") || ($val eq "X"));
}

# printSummary(participation,homework,paper,reports,presentation,project,portfolio)
sub printSummary($$$$$$$)
{
  my $participation_percent = shift;
  my $homework_percent = shift;
  my $paper_percent = shift;
  my $reports_percent = shift;
  my $presentation_percent = shift;
  my $project_percent = shift;
  my $portfolio_percent = shift;
  my $total = 0;
  my $possible = 0;

  print "Participation .. ($participation_percent%): ";
  if (!$participation) {
    print "[Not available]\n";
  } else {
    print "$participation\n";
    $total += convertLetterGrade($participation) * $participation_percent/100;
    $possible += $participation_percent;
  }

# print "Homework ....... ($homework_percent%): ";
# if (!$homework) {
#   print "[Not available]\n";
# } else {
#   print "$homework\n";
#   $total += convertLetterGrade($homework) * $homework_percent/100;
#   $possible += $homework_percent;
# }

  print "Paper .......... ($paper_percent%): ";
  if (!$paper) {
    print "[Not available]\n";
  } else {
    print "$paper\n";
    $total += convertLetterGrade($paper) * $paper_percent/100;
    $possible += $paper_percent;
  }

  print "Reports ........ ($reports_percent%): ";
  if (!$reports) {
    print "[Not available]\n";
  } else {
    print "$reports\n";
    $total += convertLetterGrade($reports) * $reports_percent/100;
    $possible += $reports_percent;
  }

  print "Presentation ... ($presentation_percent%): ";
  if (!$presentation) {
    print "[Not available]\n";
  } else {
    print "$presentation\n";
    $total += convertLetterGrade($presentation) * $presentation_percent/100;
    $possible += $presentation_percent;
  }

  print "Project ........ ($project_percent%): ";
  if (!$project) {
    print "[Not available]\n";
  } else {
    print "$project\n";
    $total += convertLetterGrade($project) * $project_percent/100;
    $possible += $project_percent;
  }

# print "Portfolio ...... ($portfolio_percent%): ";
# if (!$portfolio) {
#   print "[Not available]\n";
# } else {
#   print "$portfolio\n";
#   $total += convertLetterGrade($portfolio) * $project_percent/100;
#   $possible += $portfolio_percent;
# }

  print "\n";

  if ($extra) {
    print "Extra Credit .............: $extra units\n";
    print "\n";
  }

  my $est;
  my $adjusted;
  
  if ($possible != 0) {
    my $total = round1($total);
    my $est = round1(100 * $total/$possible);
    my $adjusted = round1($est + $extra/4);
    if ($ESTIMATED) {
      print "Estimated numeric grade: $total/$possible = $est\n";
      if ($extra) {
        print "Estimated numeric grade with $extra units of extra credit: $adjusted\n";
      }
      print "\n";
    } # if ($ESTIMATED)
    else { # if (!$ESTIMATED)
      print "Numeric grade (base, computed): $est\n";
      if ($extra) {
        print "Numeric grade (with extra credit): $adjusted\n";
      }
      print "\n";
      my $hack = 0;
      if (($numeric_grade) && ($numeric_grade ne "x")) {
        print "Numeric grade: $numeric_grade\n";
        $hack = 1;
      } # if ($numeric_grade)
      if (($letter_grade) && ($letter_grade ne "x")) {
        print "Letter grade:  $letter_grade\n";
        print "\n";
        $hack = 0;
      } # if ($letgrade)
      if ($hack) {
        print "\n";
      }
    } # if (!ESTIMATED)
  } # if there are some possible grades

  return ($total,$possible);
} # printSummary

